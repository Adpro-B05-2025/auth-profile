services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pandacare-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d # Make sure this path is correct relative to docker-compose.yml
    networks:
      - pandacare-network
    restart: unless-stopped
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PandaCare Auth-Profile Service
  auth-profile:
    build:
      context: .
      dockerfile: Dockerfile  # This should be your runtime Dockerfile
      args:
        # This 'APP_JAR' key must match the 'ARG APP_JAR' instruction in your Dockerfile
        - APP_JAR=auth-profile.jar
        # You could also use the map syntax:
        # APP_JAR: auth-profile.jar
    container_name: pandacare-auth-profile
    environment:
      # Database Configuration
      - DATASOURCE_URL=${DATASOURCE_URL}
      - DATASOURCE_USERNAME=${DATASOURCE_USERNAME}
      - DATASOURCE_PASSWORD=${DATASOURCE_PASSWORD}

      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION_MS=${JWT_EXPIRATION_MS}

      # Application Configuration
      - SERVER_PORT=${SERVER_PORT}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}

      # Rating Service Integration
      - RATING_URL=${RATING_URL}

      # Logging Configuration
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL_ROOT:-INFO}
      - LOGGING_LEVEL_AUTH_PROFILE=${LOGGING_LEVEL_AUTH_PROFILE:-DEBUG}
      - LOGGING_FILE_NAME=${LOGGING_FILE_NAME:-/app/logs/auth-profile.log}

      # Monitoring Configuration
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:-health,prometheus,metrics,info}
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:-when_authorized}
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=${MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED:-true}

      # Performance Configuration
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:-10}
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:-50}
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=${SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT:-30000}
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # You had two volume mounts for logs. Keeping the host bind mount for easier access.
      # If you also intended to use the named volume 'app_logs', ensure it's defined below
      # and uncomment if needed. For now, only ./logs is active for the app.
      # - app_logs:/app/logs
      - ./logs:/app/logs  # Mount host directory for easy log access
    networks:
      - pandacare-network
    restart: unless-stopped
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s  # Give more time for Spring Boot to start
    deploy: # This section is primarily for Docker Swarm. It might be ignored by standalone docker-compose up.
      resources:
        limits:
          memory: ${CONTAINER_MEMORY_LIMIT:-2G}
          cpus: ${CONTAINER_CPU_LIMIT:-1.0}
        reservations:
          memory: ${CONTAINER_MEMORY_RESERVATION:-1G}
          cpus: ${CONTAINER_CPU_RESERVATION:-0.5}

volumes:
  postgres_data: # Defines the named volume for PostgreSQL data persistence
    driver: local
  app_logs: # Defines the named volume 'app_logs'. It's currently not used by auth-profile above.
    driver: local

networks:
  pandacare-network:
    driver: bridge
    name: pandacare-network # Explicitly naming the network