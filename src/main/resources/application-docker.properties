# =============================================================================
# PANDACARE AUTH-PROFILE SERVICE - DOCKER PROFILE CONFIGURATION
# =============================================================================

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
spring.datasource.url=${DATASOURCE_URL:jdbc:postgresql://postgres:5432/auth-profile-2}
spring.datasource.username=${DATASOURCE_USERNAME:postgres}
spring.datasource.password=${DATASOURCE_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Connection Pool Configuration (HikariCP) - FIXED
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:10}
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:50}
spring.datasource.hikari.connection-timeout=${SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=${SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT:300000}
spring.datasource.hikari.max-lifetime=${SPRING_DATASOURCE_HIKARI_MAX_LIFETIME:1800000}
spring.datasource.hikari.leak-detection-threshold=${SPRING_DATASOURCE_HIKARI_LEAK_DETECTION_THRESHOLD:60000}
spring.datasource.hikari.validation-timeout=5000

# =============================================================================
# JWT CONFIGURATION
# =============================================================================
pandacare.app.jwtSecret=${JWT_SECRET}
pandacare.app.jwtExpirationMs=${JWT_EXPIRATION_MS}

# =============================================================================
# SERVICE INTEGRATION
# =============================================================================
service.rating.url=${RATING_URL:http://host.docker.internal:8083}

# Rating Service Configuration
rating.cache.scheduler.enabled=${RATING_CACHE_SCHEDULER_ENABLED:true}
rating.cache.update.interval=${RATING_CACHE_UPDATE_INTERVAL:3600000}
rating.health.check.interval=${RATING_HEALTH_CHECK_INTERVAL:300000}
rating.service.connection.timeout=${RATING_SERVICE_CONNECTION_TIMEOUT:5000}
rating.service.read.timeout=${RATING_SERVICE_READ_TIMEOUT:10000}

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server.port=${SERVER_PORT:8081}
server.servlet.context-path=/
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.http2.enabled=true

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging.level.root=${LOGGING_LEVEL_ROOT:INFO}
logging.level.id.ac.ui.cs.advprog.authprofile=${LOGGING_LEVEL_AUTH_PROFILE:DEBUG}
logging.level.org.springframework.security=${LOGGING_LEVEL_SECURITY:INFO}
logging.level.org.springframework.web=${LOGGING_LEVEL_WEB:INFO}
logging.level.org.hibernate.SQL=${LOGGING_LEVEL_SQL:INFO}

# Log file configuration
logging.file.name=${LOGGING_FILE_NAME:/app/logs/auth-profile.log}
logging.logback.rollingpolicy.max-file-size=${LOGGING_FILE_MAX_SIZE:100MB}
logging.logback.rollingpolicy.max-history=${LOGGING_FILE_MAX_HISTORY:10}
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# =============================================================================
# ACTUATOR & MONITORING CONFIGURATION
# =============================================================================
management.endpoints.web.exposure.include=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info,metrics,prometheus}
management.endpoint.health.show-details=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:when_authorized}
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Prometheus metrics - FIXED
management.prometheus.metrics.export.enabled=${MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED:true}
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles.http.server.requests=0.5,0.95,0.99
management.metrics.distribution.slo.http.server.requests=10ms,50ms,100ms,200ms,500ms

# Custom metrics tags
management.metrics.tags.application=${MANAGEMENT_METRICS_TAGS_APPLICATION:auth-profile}
management.metrics.tags.environment=${MANAGEMENT_METRICS_TAGS_ENVIRONMENT:docker}
management.metrics.tags.version=${MANAGEMENT_METRICS_TAGS_VERSION:1.0.0}

# =============================================================================
# ASYNC & THREAD POOL CONFIGURATION
# =============================================================================
spring.task.execution.pool.core-size=${SPRING_TASK_EXECUTION_POOL_CORE_SIZE:10}
spring.task.execution.pool.max-size=${SPRING_TASK_EXECUTION_POOL_MAX_SIZE:50}
spring.task.execution.pool.queue-capacity=${SPRING_TASK_EXECUTION_POOL_QUEUE_CAPACITY:200}
spring.task.execution.thread-name-prefix=auth-profile-task-
spring.task.execution.pool.allow-core-thread-timeout=true
spring.task.execution.pool.keep-alive=60s

spring.task.scheduling.pool.size=${SPRING_TASK_SCHEDULING_POOL_SIZE:5}
spring.task.scheduling.thread-name-prefix=auth-profile-scheduler-

# =============================================================================
# CACHING CONFIGURATION
# =============================================================================
spring.cache.type=caffeine
spring.cache.cache-names=${SPRING_CACHE_CACHE_NAMES:ratingSummary,nameSuggestions,specialitySuggestions}
spring.cache.caffeine.spec=${SPRING_CACHE_CAFFEINE_SPEC:maximumSize=1000,expireAfterWrite=30m}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# CORS Configuration
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:*}
cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,PATCH,OPTIONS}
cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}
cors.max-age=${CORS_MAX_AGE:3600}

# =============================================================================
# PERFORMANCE & OPTIMIZATION
# =============================================================================
# Database performance
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true